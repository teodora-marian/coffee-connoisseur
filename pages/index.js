import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import Banner from '@/components/banner'
import Card from '@/components/card'

import { useEffect, useState, useContext } from 'react'
import { fetchCoffeeStores } from '@/lib/coffee-stores'
import useTrackLocation from '@/hooks/use-track-location'
import { ACTION_TYPES, StoreContext } from '../storage/store-context'


export async function getStaticProps(context) {
  console.log("hi getStaticProps");
  const coffeeStores = await fetchCoffeeStores();
  console.log("======>coffee stores", coffeeStores)

  return {
    props: {coffeeStores,},
  }; // will be passed to the page component as props
}

export default function Home(props) {
  console.log("home props", props);

  //destructuring
  const {handleTrackLocation, locationErrorMsg, isFindingLocation} = useTrackLocation();
  //console.log ({latLong, locationErrorMsg}); // same as logging ('latLong', latLong), when term repeats, can use {}

  //storing the returned results from user input into an external state
  //const [coffeeStores, setCoffeeStores] = useState('');
  //commented the above out, in order to get data from the useContext state, not the local useState

  const [coffeeStoresError, setCoffeeStoresError] = useState(null);

  const {dispatch, state} = useContext(StoreContext);

  const {coffeeStores, latLong} = state;

  console.log("====== HELLO MOTO ======", coffeeStores)

  useEffect (() => {
    async function setCoffeeStoresByLocation() {
      if (latLong) {
        try {
          const response = await fetch(
            `/api/getCoffeeStoresByLocation?latLong=${latLong}&limit=30`
          );

          const coffeeStores = await response.json();
          // setCoffeeStores(fetchedCoffeeStores);
          
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {coffeeStores},
          });
          setCoffeeStoresError(""); //clearing the value after success
          //set coffee stores above
        } catch (error) {
          //set error
          console.log({ error });
          setCoffeeStoresError(error.message);
        }
      }
    }
    setCoffeeStoresByLocation();
  }, [latLong]); // declarring dependency, because we only want new coffee store rendered if we receive latLong from user

  const handleOnBannerBtnClick = () => {
    console.log("hi banner button");
    handleTrackLocation();
  };

  return (
    <>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by coffee lovers" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner 
          buttonText={isFindingLocation? "Locating..." : "View stores nearby"}
          handleOnClick={handleOnBannerBtnClick}
        />
        {locationErrorMsg && <p>Something went wrong: {locationErrorMsg}</p>}
        {coffeeStoresError && <p>Something went wrong: {coffeeStoresError}</p>}

        <div className={styles.heroImage}>
          <Image src="/static/hero-image.png" alt ="hero image" width={700} height={400}/>   
        </div>

        <div className={styles.sectionWrapper}>
        {coffeeStores.length > 0 && (
          <>
        <h2 className={styles.heading2}>Stores near me</h2>
        <div className={styles.cardLayout}>
          {coffeeStores.map((coffeeStore) => {
            return (
              <Card
              key={coffeeStore.id}
              name={coffeeStore.name}
              imgUrl={coffeeStore.imgUrl || "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80" }
              href={`/coffee-store/${coffeeStore.id}`}
              className={styles.card}
              />
            );
          })} 
        </div>
        </> 
        )};
        </div>
        
        <div className={styles.sectionWrapper}>
        {props.coffeeStores.length > 0 && (
        <>
        <h2 className={styles.heading2}>Cluj Napoca stores</h2>
        <div className={styles.cardLayout}>
          {props.coffeeStores.map((coffeeStore) => {
            return (
              <Card
              key={coffeeStore.id}
              name={coffeeStore.name}
              imgUrl={coffeeStore.imgUrl || "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80" }
              href={`/coffee-store/${coffeeStore.id}`}
              className={styles.card}
              />
            );
          })} 
        </div> 
        </>
        )}
        </div>
      </main>
    </>
  )
}
